CCS PCM C Compiler, Version 5.008, 5967               27-mai-18 19:41

               Filename:   C:\Users\mateu\Google Drive\Engenharia\Microcontroladores\Carrinho\main.lst

               ROM used:   142 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           6 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... #include <main.h> 
....................  
....................  
....................  
....................  
.................... #include <16F876A.h> 
.................... //////// Standard Header file for the PIC16F876A device //////////////// 
.................... #device PIC16F876A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES WDT                      //Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
.................... #use FIXED_IO( B_outputs=PIN_B7,PIN_B6,PIN_B5,PIN_B4,PIN_B3,PIN_B2,PIN_B1,PIN_B0 ) 
.................... #use rs232(baud=1200,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
....................  
.................... #define ENA PIN_B7 
.................... #define IN1 PIN_B6 
.................... #define IN2 PIN_B5 
.................... #define IN3 PIN_B4 
.................... #define IN4 PIN_B3  
.................... #define ENB PIN_B2  
....................  
.................... char dado; 
....................  
.................... void main() 
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  MOVLW  FF
0008:  BSF    03.5
0009:  MOVWF  19
000A:  MOVLW  A2
000B:  MOVWF  18
000C:  MOVLW  90
000D:  BCF    03.5
000E:  MOVWF  18
000F:  BSF    03.5
0010:  BSF    1F.0
0011:  BSF    1F.1
0012:  BSF    1F.2
0013:  BCF    1F.3
0014:  MOVLW  07
0015:  MOVWF  1C
0016:  BCF    03.7
.................... { 
....................    setup_wdt(WDT_288MS);      //~288,0 ms reset 
0017:  MOVLW  0C
0018:  MOVWF  77
0019:  BCF    03.5
001A:  CLRF   01
001B:  MOVLW  81
001C:  MOVWF  04
001D:  BCF    03.7
001E:  MOVF   00,W
001F:  ANDLW  F0
0020:  IORLW  07
0021:  MOVWF  00
0022:  CLRWDT
0023:  MOVF   00,W
0024:  ANDLW  F7
0025:  BTFSC  77.3
0026:  ANDLW  F0
0027:  IORWF  77,W
0028:  MOVWF  00
....................     
....................    output_b(0b00000000);      //Começa com tudo parado 
0029:  BSF    03.5
002A:  CLRF   06
002B:  BCF    03.5
002C:  CLRF   06
....................  
....................    output_high(ENA); //Ativa o motor A 
002D:  MOVLW  00
002E:  BSF    03.5
002F:  MOVWF  06
0030:  BCF    03.5
0031:  BSF    06.7
....................    output_high(ENB); //Ativa o motor B 
0032:  BSF    03.5
0033:  MOVWF  06
0034:  BCF    03.5
0035:  BSF    06.2
....................    while(TRUE)          //loop infinito 
....................    { 
....................       if(kbhit()){      //verifica se tem algum char no buffer do serial 
0036:  BTFSS  0C.5
0037:  GOTO   08B
....................          dado = getc();    //se tiver, dado recebe o que está no buffer 
0038:  BTFSS  0C.5
0039:  GOTO   038
003A:  MOVF   1A,W
003B:  MOVWF  20
....................          switch(dado){     //Compara dado com os casos abaixo 
003C:  MOVF   20,W
003D:  XORLW  41
003E:  BTFSC  03.2
003F:  GOTO   050
0040:  XORLW  20
0041:  BTFSC  03.2
0042:  GOTO   05A
0043:  XORLW  23
0044:  BTFSC  03.2
0045:  GOTO   064
0046:  XORLW  01
0047:  BTFSC  03.2
0048:  GOTO   06E
0049:  XORLW  20
004A:  BTFSC  03.2
004B:  GOTO   078
004C:  XORLW  27
004D:  BTFSC  03.2
004E:  GOTO   082
004F:  GOTO   08B
....................          case 'A': 
....................             output_high(IN1);    //Ativa o IN1 do motor A 
0050:  MOVLW  00
0051:  BSF    03.5
0052:  MOVWF  06
0053:  BCF    03.5
0054:  BSF    06.6
....................             output_low(IN2);     //Desativa o IN2 do motor A 
0055:  BSF    03.5
0056:  MOVWF  06
0057:  BCF    03.5
0058:  BCF    06.5
....................             //Nesse caso o motor A terá uma aceleração positiva 
....................             //fprintf(PORT1,"\nRecebido: A\n");   //Confirma o último comando executado 
....................          break; 
0059:  GOTO   08B
....................          case 'a': 
....................             output_low(IN1);     //Desativa o IN1 do motor A 
005A:  MOVLW  00
005B:  BSF    03.5
005C:  MOVWF  06
005D:  BCF    03.5
005E:  BCF    06.6
....................             output_low(IN2);     //Desativa o IN2 do motor A 
005F:  BSF    03.5
0060:  MOVWF  06
0061:  BCF    03.5
0062:  BCF    06.5
....................             //Nesse caso o motor A ficará parado 
....................             //fprintf(PORT1,"\nRecebido: a\n");   //Confirma o último comando executado 
....................          break; 
0063:  GOTO   08B
....................          case 'B': 
....................             output_low(IN1);     //Desativa o IN1 do motor A 
0064:  MOVLW  00
0065:  BSF    03.5
0066:  MOVWF  06
0067:  BCF    03.5
0068:  BCF    06.6
....................             output_high(IN2);    //Ativa o IN2 do motor A 
0069:  BSF    03.5
006A:  MOVWF  06
006B:  BCF    03.5
006C:  BSF    06.5
....................             //Nesse caso o motor A terá uma aceleração negativa 
....................             //fprintf(PORT1,"\nRecebido: B\n");   //Confirma o último comando executado 
....................          break; 
006D:  GOTO   08B
....................          /////////////////////////Daqui para baixo são os casos que alteram o motor B////////////////////////// 
....................          case 'C': 
....................             output_high(IN3);    //Ativa o IN3 do motor A 
006E:  MOVLW  00
006F:  BSF    03.5
0070:  MOVWF  06
0071:  BCF    03.5
0072:  BSF    06.4
....................             output_low(IN4);     //Desativa o IN4 do motor A 
0073:  BSF    03.5
0074:  MOVWF  06
0075:  BCF    03.5
0076:  BCF    06.3
....................             //Nesse caso o motor B terá uma aceleração positiva 
....................             //fprintf(PORT1,"\nRecebido: C\n");   //Confirma o último comando executado 
....................          break; 
0077:  GOTO   08B
....................          case 'c': 
....................             output_low(IN3);     //Desativa o IN3 do motor A 
0078:  MOVLW  00
0079:  BSF    03.5
007A:  MOVWF  06
007B:  BCF    03.5
007C:  BCF    06.4
....................             output_low(IN4);     //Desativa o IN4 do motor A 
007D:  BSF    03.5
007E:  MOVWF  06
007F:  BCF    03.5
0080:  BCF    06.3
....................             //Nesse caso o motor B ficará parado 
....................             //fprintf(PORT1,"\nRecebido: c\n");   //Confirma o último comando executado 
....................          break; 
0081:  GOTO   08B
....................          case 'D': 
....................             output_low(IN3);     //Desativa o IN3 do motor A 
0082:  MOVLW  00
0083:  BSF    03.5
0084:  MOVWF  06
0085:  BCF    03.5
0086:  BCF    06.4
....................             output_high(IN4);    //Ativa o IN4 do motor A 
0087:  BSF    03.5
0088:  MOVWF  06
0089:  BCF    03.5
008A:  BSF    06.3
....................             //Nesse caso o motor B terá uma aceleração negativa 
....................             //fprintf(PORT1,"\nRecebido: D\n");   //Confirma o último comando executado 
....................          break; 
....................          } //fim do switch 
....................       } //fim do if 
....................       restart_wdt(); //reseta o timer do WDT 
008B:  CLRWDT
008C:  GOTO   036
....................    } //fim do while 
....................  
.................... } //fim do main  
008D:  SLEEP

Configuration Fuses:
   Word  1: 3F36   HS WDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
